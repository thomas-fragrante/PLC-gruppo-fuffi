// ignore_for_file: library_private_types_in_public_api

import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  ThemeMode _themeMode = ThemeMode.light;

  void toggleTheme() {
    setState(() {
      _themeMode =
          _themeMode == ThemeMode.light ? ThemeMode.dark : ThemeMode.light;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Home Base',
      theme: ThemeData.light(),
      darkTheme: ThemeData.dark(),
      themeMode: _themeMode,
      home: HomeBase(toggleTheme: toggleTheme),
    );
  }
}

class HomeBase extends StatefulWidget {
  final Function toggleTheme;

  const HomeBase({super.key, required this.toggleTheme});

  @override
  _HomeBaseState createState() => _HomeBaseState();
}

class _HomeBaseState extends State<HomeBase> {
  int _selectedIndex = 0;

  static final List<Widget> _widgetOptions = <Widget>[
    const HomeScreen(),
    const SettingsScreen(),
    const WarehouseScreen(),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Schedle'),
      ),
      body: Center(
        child: _widgetOptions.elementAt(_selectedIndex),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'Impostazioni',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.warehouse),
            label: 'Magazzino',
          ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Colors.amber[800],
        onTap: _onItemTapped,
      ),
    );
  }
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  CalendarFormat _calendarFormat = CalendarFormat.month;
  DateTime _selectedDay = DateTime.now();
  DateTime _focusedDay = DateTime.now();
  final Map<DateTime, List<Map<String, dynamic>>> _events = {};

  List<Map<String, dynamic>> _getEventsForDay(DateTime day) {
    return _events[day] ?? [];
  }

  void _addEvent(
      String name, String timeRange, int robotsUsed, String operators) {
    final event = {
      'name': name,
      'timeRange': timeRange,
      'robotsUsed': robotsUsed,
      'operators': operators
    };
    setState(() {
      if (_events[_selectedDay] != null) {
        _events[_selectedDay]!.add(event);
      } else {
        _events[_selectedDay] = [event];
      }
    });
  }

  void _showAddEventDialog() {
    final nameController = TextEditingController();
    final timeRangeController = TextEditingController();
    final robotsUsedController = TextEditingController();
    final operatorsController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Aggiungi Evento'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: nameController,
              decoration: const InputDecoration(labelText: 'Nome'),
            ),
            TextField(
              controller: timeRangeController,
              decoration: const InputDecoration(labelText: 'Fascia Oraria'),
            ),
            TextField(
              controller: robotsUsedController,
              decoration:
                  const InputDecoration(labelText: 'Numero di Robot Usati'),
              keyboardType: TextInputType.number,
            ),
            TextField(
              controller: operatorsController,
              decoration: const InputDecoration(labelText: 'Operatori'),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
            },
            child: const Text('Annulla'),
          ),
          TextButton(
            onPressed: () {
              _addEvent(
                nameController.text,
                timeRangeController.text,
                int.parse(robotsUsedController.text),
                operatorsController.text,
              );
              Navigator.pop(context);
            },
            child: const Text('Aggiungi'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        TableCalendar(
          firstDay: DateTime.utc(2010, 10, 16),
          lastDay: DateTime.utc(2030, 3, 14),
          focusedDay: _focusedDay,
          calendarFormat: _calendarFormat,
          selectedDayPredicate: (day) {
            return isSameDay(_selectedDay, day);
          },
          onDaySelected: (selectedDay, focusedDay) {
            setState(() {
              _selectedDay = selectedDay;
              _focusedDay = focusedDay; // update `_focusedDay` here as well
            });
          },
          onFormatChanged: (format) {
            if (_calendarFormat != format) {
              setState(() {
                _calendarFormat = format;
              });
            }
          },
          onPageChanged: (focusedDay) {
            _focusedDay = focusedDay;
          },
          eventLoader: _getEventsForDay,
        ),
        ..._getEventsForDay(_selectedDay).map((event) => ListTile(
              title: Text(event['name']),
              subtitle: Text(
                  'Orario: ${event['timeRange']}, Robot Usati: ${event['robotsUsed']}, Operatori: ${event['operators']}'),
            )),
        ElevatedButton(
          onPressed: _showAddEventDialog,
          child: const Text('Aggiungi Evento'),
        ),
      ],
    );
  }

  bool isSameDay(DateTime? a, DateTime? b) {
    if (a == null || b == null) {
      return false;
    }
    return a.year == b.year && a.month == b.month && a.day == b.day;
  }
}

class SettingsScreen extends StatelessWidget {
  const SettingsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final toggleTheme =
        (context.findAncestorWidgetOfExactType<HomeBase>() as HomeBase)
            .toggleTheme;

    return Center(
      child: ElevatedButton(
        onPressed: () => toggleTheme(),
        child: const Text('Toggle ModalitÃ  Chiaro/Scuro'),
      ),
    );
  }
}

class WarehouseScreen extends StatefulWidget {
  const WarehouseScreen({super.key});

  @override
  _WarehouseScreenState createState() => _WarehouseScreenState();
}

class _WarehouseScreenState extends State<WarehouseScreen> {
  int robotA = 0;
  int robotB = 0;
  int robotC = 0;

  void _incrementRobotA() {
    setState(() {
      robotA++;
    });
  }

  void _incrementRobotB() {
    setState(() {
      robotB++;
    });
  }

  void _incrementRobotC() {
    setState(() {
      robotC++;
    });
  }

  int _getTotalRobots() {
    return robotA + robotB + robotC;
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text('Robot tipo A: $robotA'),
        Text('Robot tipo B: $robotB'),
        Text('Robot tipo C: $robotC'),
        Text('Totale robot: ${_getTotalRobots()}'),
        ElevatedButton(
          onPressed: _incrementRobotA,
          child: const Text('Aggiungi Robot A'),
        ),
        ElevatedButton(
          onPressed: _incrementRobotB,
          child: const Text('Aggiungi Robot B'),
        ),
        ElevatedButton(
          onPressed: _incrementRobotC,
          child: const Text('Aggiungi Robot C'),
        ),
      ],
    );
  }
}
